#include <iostream>
#include <list>
#include <vector>

class Graph {
private:
    int numVertices;
    std::vector<std::list<int>> adjacencyList;

public:
    Graph(int vertices) : numVertices(vertices), adjacencyList(vertices) {}

    void addEdge(int src, int dest) {
        adjacencyList[src].push_back(dest);
        adjacencyList[dest].push_back(src);
    }

    bool isCyclicUtil(int v, std::vector<bool>& visited, int parent) {
        visited[v] = true;

        // Recur for all the adjacent vertices
        for (int neighbor : adjacencyList[v]) {
            if (!visited[neighbor]) {
                if (isCyclicUtil(neighbor, visited, v))
                    return true;
            }
            else if (neighbor != parent)
                return true;
        }
        return false;
    }

    bool isCyclic() {
        std::vector<bool> visited(numVertices, false);

        // Call the helper function for every vertex
        for (int v = 0; v < numVertices; ++v) {
            if (!visited[v]) {
                if (isCyclicUtil(v, visited, -1))
                    return true;
            }
        }
        return false;
    }
};

int main() {
    Graph graph(5); // Create a graph with 5 vertices

    // Add edges
    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(3, 4);

    if (graph.isCyclic())
        std::cout << "Cycle exists in the graph." << std::endl;
    else
        std::cout << "No cycle exists in the graph." << std::endl;

    return 0;
}
